source:

    (
    yt
    >>
    ForrestKnight
    >>
    7 Design Patterns EVERY Developer Should Know
    )



notes:

    [this video discusses and provides examples for]
    7 different software design patterns
    
    [it is highly likely that you are already using some of those patterns,]
    whether you realize it or not
    
    (
    simply put,
    they are solutions to common programming problems
    that appear over and over ...
    - regardless of what language or platform you're using

    all of these [design patterns] are good programming technique[s]
    )



    back in 1994,
    ... four developers known as "the Gang of Four" wrote [a] book
    [in which] they documented and formalized 23 commonly used design patterns

    [this video is] not going to go over all 23
    but ... note that all 23 do fall into 3 [categories]

        creational patterns

            are all about object creation

            so, instead of creating objects directly,
            these patterns [provide] more flexibility
            on how objects come into existence

        structural patterns

            deal with how objects relate to each other

        behavioral patterns

            handle communication between objects,
            how they interact and distribute responsibilities



    creational pattern #1: Singleton Pattern

        [it could be helpful to] use the Singleton pattern
        when you absolutely need a single instance that's accessible globally
        (
        like a database connection pool
        or
        the logger
        )

        but it does have some trade-offs

            the good is that
            you get guaranteed single instance and global access

            the bad is that ...
                
                it's a bit of a nightmare to test
                and that's because you can't easily mock it;
            
                ... also in multi-threaded environments[,]
                you need special handling to prevent creating multiple instances



    creational pattern #2: Builder Pattern

        [it could be helpful to use the Builder Pattern]
        [when you need] to create something that has [a large number of] optional parameters ...

        think about creating a complex API request

            you've got
            headers
            query params,
            body data,
            ... timeout settings,
            retry logic,
            [...]

            trying to do all of that in a single Construction will look [lengthy]

        the beauty of the Builder Pattern is that
        you can chain methods in any order;
        you can skip the optional ones;
        and your code actually reads like English



    creational pattern #3: Factory Pattern

        [it could be helpful to use the Factory Pattern]
        when object creation involes complex setup
        or
        when [your application/system needs to be able to create] multiple related types;
        [however,]
        for simple objects, a regular constructor is fine

        think about creating different types of users in your [application/system, e.g.]
        you [might have]
            admins[, ...]
            regular users[, ...]
            moderators

        without a factory[,]
        the implementation might look like `2025-03-30-14-23-03-factory-pattern.ts`

        if we were to follow the factory pattern[,]
        [... any] messy logic [for] object creation ... is hidden in the factory class
        and
        all we have to do to create a new user is [call a `build` method on the factory]

        ... you don't need to know any of that
        or at least you don't need to focus on that
        every single time you see ... you need to create a new user

        the downside of a factory is that
        you're adding another layer of abstraction

        the upside of a factory is that
        all of the creation logic is in the same place - in that factory class



    structural pattern # 1: Facade Pattern

        [it could be helpful to use the Facade Pattern]
        when you ... have a [lot] of ... subsystems
        that you need to [integrate with one another]

        [the Facade Pattern]

            is exactly what it sounds like:
            putting up a pretty front to hide everything behind it

            [can be viewed as] just a really fancy word for "encapsulation"

        (
        and you may be saying,
        "well, isn't this kind of similar to ... the Factory Pattern?

        ...
        remember:
        creational patterns are for object creation;
        structural patterns are for how objects relate to one another;
        )

        [the upside of the Facade Pattern is] ...
            the outward appearance of [an] interface or class [executing all of your business logic]
            and
            it hides all of all the complexity [constituting your business logic]

        [one] downside [of using the Facade Pattern] is
            it could [balloon into]
            knowing too much and doing too much

        ---------------------------------------------------------------------------------

        [it is interesting to note that]
        you're probably using [tools that leverage the Facade Pattern] all the time ...

            think of a HTTP client:
                
                - you just call "fetch API users" and you get your data ...

                - you don't care about
                  TCP connections
                  or retry logic
                  or header parsing
                  or any of that low-level stuff

            [certain constructs] built into programming languages
            like an `ArrayList` in Java:

                - it's hiding all sorts of array resizing complexity
                  behind a clean interface `ArrayList`

    

    structural pattern #2: Adapter Pattern

        [it could be helpful to use] the Adapter Pattern
        when [your code invokes]
            [a] third-party [library]
            or
            [a web API]
        that [returns data structures or data
        which don't quite match what your code expects]

        [to handle such a situation,]
        all you have to [or, arguably, ought to] do is
        to wrap [the invocations of the 3rd-party component] in [an adapter class]



    behavioral patter #1: Strategy Pattern

        [it could be helpful to use] the Strategy Pattern
        [when you have] a family of algorithms
        [which your applications needs to treat as] completely interchangeable

        define a family of algorithms...[,]
        put each into its own class,
        and then make them completely interchangeable

        it's just a fancy way of saying
        "programming at an interface level"

            [
            write an interface
            which is an abstract representation of a strategy/algorithm
            ]

            [for each algorithm in your] family of algorithms,
            put each into its own class
        
            that renders
            all of those algorithsm/strategy/classes
            completely interchangeable,
            [enabling] you to swap implementations
            without [having] to change any of [the existing] code

        it follows the open-closed principle perfectly

            you can add new [algorithms/]strategies
            without touching any existing code

        [the upside is that
        it prevents an `if`-`else` hell from transpiring]

        the downside is that
        you end up with a whole bunch of classes



    behavioral pattern #2: Observer Pattern

        objects subscribe to events that happen to other objects

        ...

        this could be ...
        
            servers looking for system errors or monitoring for them
            (so anytime there's a system error ..., it gets notified)

            or

            a component listening for ... state changes

        so remember object

        ...
    
        the Observer pattern is is
        a ... way to handle the ... "if this happens, do that"



    Know When to Use Each One

        like any good tool,
        it's [important to know] when to use each one
        [and when not to use it]
